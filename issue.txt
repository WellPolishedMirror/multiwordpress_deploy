My PersistentVolumeClaims aren't getting bounded. I believe this is an issue with minikube:

https://github.com/kubernetes/minikube/issues/7218

This has a similar error message to what I see in my minikube log:

k8s.io/minikube/vendor/github.com/r2d4/external-storage/lib/controller/controller.go:411: Failed to list *v1.PersistentVolumeClaim: v1.PersistentVolumeClaimList: Items: []v1.PersistentVolumeClaim: v1.PersistentVolumeClaim: ObjectMeta: v1.ObjectMeta: readObjectFieldAsBytes: expect : after object field, parsing 1276 ...:{},"k:{\"... at {"kind":"PersistentVolumeClaimList","apiVersion":"v1","metadata":{"selfLink":"/api/v1/persistentvolumeclaims","resourceVersion":"12740"},"items":[{"metadata":{"name":"mysite-mysql","namespace":"default","selfLink":"/api/v1/namespaces/default/persistentvolumeclaims/mysite-mysql","uid":"4ac58959-e5e3-4b67-a2fa-432b2a6f80b8","resourceVersion":"12736","creationTimestamp":"2020-07-06T05:58:25Z","labels":{"app":"wordpress","tier":"mysql","wordpress_cr":"mysite"},"annotations":{"volume.beta.kubernetes.io/storage-provisioner":"k8s.io/minikube-hostpath"},"ownerReferences":[{"apiVersion":"example.com/v1","kind":"Wordpress","name":"mysite","uid":"2aa3611a-c10e-4dd4-9e8f-3c83183c7be5","controller":true,"blockOwnerDeletion":true}],"finalizers":["kubernetes.io/pvc-protection"],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2020-07-06T05:58:25Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:volume.beta.kubernetes.io/storage-provisioner":{}}}}},{"manager":"wordpress-operator","operation":"Update","apiVersion":"v1","time":"2020-07-06T05:58:25Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:labels":{".":{},"f:app":{},"f:tier":{},"f:wordpress_cr":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"2aa3611a-c10e-4dd4-9e8f-3c83183c7be5\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:accessModes":{},"f:resources":{"f:requests":{".":{},"f:storage":{}}},"f:storageClassName":{},"f:volumeMode":{}},"f:status":{"f:phase":{}}}}]},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"20Gi"}},"storageClassName":"standard","volumeMode":"Filesystem"},"status":{"phase":"Pending"}},{"metadata":{"name":"mysite-wordpress","namespace":"default","selfLink":"/api/v1/namespaces/default/persistentvolumeclaims/mysite-wordpress","uid":"39a7338a-9d04-4e3d-86d8-633d4222a6ed","resourceVersion":"12740","creationTimestamp":"2020-07-06T05:58:25Z","labels":{"app":"wordpress","tier":"frontend","wordpress_cr":"mysite"},"annotations":{"volume.beta.kubernetes.io/storage-provisioner":"k8s.io/minikube-hostpath"},"ownerReferences":[{"apiVersion":"example.com/v1","kind":"Wordpress","name":"mysite","uid":"2aa3611a-c10e-4dd4-9e8f-3c83183c7be5","controller":true,"blockOwnerDeletion":true}],"finalizers":["kubernetes.io/pvc-protection"],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2020-07-06T05:58:25Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:volume.beta.kubernetes.io/storage-provisioner":{}}}}},{"manager":"wordpress-operator","operation":"Update","apiVersion":"v1","time":"2020-07-06T05:58:25Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:labels":{".":{},"f:app":{},"f:tier":{},"f:wordpress_cr":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"2aa3611a-c10e-4dd4-9e8f-3c83183c7be5\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:accessModes":{},"f:resources":{"f:requests":{".":{},"f:storage":{}}},"f:storageClassName":{},"f:volumeMode":{}},"f:status":{"f:phase":{}}}}]},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"20Gi"}},"storageClassName":"standard","volumeMode":"Filesystem"},"status":{"phase":"Pending"}}]}

As a workaround, for now I'll just create the PersistentVolumes myself for testing.
